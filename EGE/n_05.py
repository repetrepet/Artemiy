# ЗАДАЧА 1
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа ещё два разряда по следующему правилу:
# а) складываются все цифры двоичной записи, и остаток от деления суммы на 2 дописывается в конец числа (справа).
# б) над этой записью производятся те же действия — справа дописывается остаток от деления суммы цифр на 2.
# Полученная таким образом запись является двоичной записью искомого числа R.
# Укажите минимальное число R, которое превышает 43 и может являться результатом работы алгоритма.

print("ЗАДАЧА 1:")
for n in range(1, 1000):           # Перебираем все возможные натуральные числа N
    binary_n = bin(n)[2:]          # Переводим число N в двоичную систему (убираем префикс '0b')
    
    ost = binary_n.count('1') % 2  # Считаем сумму цифр (количество единиц) и находим остаток от деления на 2
    binary_n += str(ost)           # Дописываем найденный остаток справа к двоичной записи
    
    ost = binary_n.count('1') % 2  # Повторяем процедуру: снова считаем сумму цифр и находим остаток
    binary_n += str(ost)           # Дописываем второй остаток справа
    
    r = int(binary_n, 2)           # Переводим полученную двоичную запись обратно в десятичное число R
    if r > 43:                     # Если R превышает 43
        print(r)                   # Выводим найденное R
        break                      # Прерываем цикл после нахождения первого подходящего числа

# Ответ: 46


# ЗАДАЧА 2
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число R следующим образом.
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа ещё два разряда по следующему правилу: складываются все цифры двоичной записи:
# а) если сумма нечетная, к числу дописывается 11,
# б) если сумма четная, дописывается 00.
# Полученная таким образом запись является двоичной записью искомого числа R.
# Укажите такое наименьшее число R, которое превышает 114 и может являться результатом работы алгоритма.

print("\nЗАДАЧА 2:")
for n in range(1, 1000):           # Перебираем все возможные натуральные числа N
    x = bin(n)[2:]                 # Переводим число N в двоичную систему
    summa = x.count('1')           # Считаем сумму цифр (количество единиц) в двоичной записи
    
    if summa % 2 != 0:             # Если сумма цифр нечетная
        x += '11'                  # Дописываем "11" справа
    else:                          # Если сумма цифр четная
        x += '00'                  # Дописываем "00" справа
    
    r = int(x, 2)                  # Переводим полученную двоичную запись обратно в десятичное число R
    if r > 114:                    # Если R превышает 114
        print(r)                   # Выводим найденное R
        break                      # Прерываем цикл после нахождения первого подходящего числа

# Ответ: 115


# ЗАДАЧА 3
# На вход алгоритма подаётся натуральное число N. Алгоритм строит по нему новое число следующим образом.
# 1. Строится двоичная запись числа N.
# 2. К этой записи дописываются справа ещё два разряда по следующему правилу: 
# если N чётное, в конец числа (справа) дописываются два нуля, 
# в противном случае справа дописываются две единицы.
# Полученная таким образом запись является двоичной записью результата работы алгоритма.
# Укажите минимальное число N, для которого результат работы алгоритма будет больше 115.

print("\nЗАДАЧА 3:")
for n in range(1, 1000):           # Перебираем все возможные натуральные числа N
    x = bin(n)[2:]                 # Переводим число N в двоичную систему
    
    if n % 2 == 0:                 # Если исходное число N четное
        x += '00'                  # Дописываем "00" справа
    else:                          # Если исходное число N нечетное
        x += '11'                  # Дописываем "11" справа
    
    r = int(x, 2)                  # Переводим полученную двоичную запись обратно в десятичное число R
    if r > 115:                    # Если R превышает 115
        print(n)                   # Выводим найденное N (не R!)
        break                      # Прерываем цикл после нахождения первого подходящего числа

# Ответ: 30


# ЗАДАЧА 4
# Автомат обрабатывает натуральное число N > 1 по следующему алгоритму.
# 1. Строится двоичная запись числа N.
# 2. Последняя цифра двоичной записи удаляется.
# 3. Если исходное число N было нечётным, в конец записи (справа) дописываются цифры 10, 
#    если чётным — 01.
# 4. Результат переводится в десятичную систему и выводится на экран.
# Какое число нужно ввести в автомат, чтобы в результате получилось 2018?

print("\nЗАДАЧА 4:")
for n in range(2, 10000):          # Перебираем натуральные числа N > 1
    x = bin(n)[2:-1]               # Переводим в двоичную систему и удаляем последнюю цифру
    
    if n % 2 != 0:                 # Если исходное число N нечетное
        x += '10'                  # Дописываем "10" справа
    else:                          # Если исходное число N четное
        x += '01'                  # Дописываем "01" справа
    
    r = int(x, 2)                  # Переводим полученную двоичную запись обратно в десятичное число
    if r == 2018:                  # Если результат равен 2018
        print(n)                   # Выводим найденное N
        break                      # Прерываем цикл после нахождения первого подходящего числа

# Ответ: 1010


# ЗАДАЧА 5
# Автомат получает на вход четырёхзначное число (число не может начинаться с нуля). 
# По этому числу строится новое число по следующим правилам.
# 1. Складываются отдельно первая и вторая, вторая и третья, третья и четвёртая цифры заданного числа.
# 2. Наименьшая из полученных трёх сумм удаляется.
# 3. Оставшиеся две суммы записываются друг за другом в порядке неубывания без разделителей.
# Укажите наибольшее число, при обработке которого автомат выдаёт результат 1315.

print("\nЗАДАЧА 5:")
for n in range(1000, 10000):       # Перебираем все четырехзначные числа
    s = str(n)                     # Преобразуем число в строку для работы с отдельными цифрами
    
    # Вычисляем три суммы соседних цифр:
    sum1 = int(s[0]) + int(s[1])   # Сумма первой и второй цифр
    sum2 = int(s[1]) + int(s[2])   # Сумма второй и третьей цифр  
    sum3 = int(s[2]) + int(s[3])   # Сумма третьей и четвертой цифр
    
    l = [sum1, sum2, sum3]         # Создаем список из трех сумм
    l.sort()                       # Сортируем список по возрастанию
    l.pop(0)                       # Удаляем наименьший элемент (первый в отсортированном списке)
    
    result = str(l[0]) + str(l[1]) # Формируем результат: оставшиеся две суммы в порядке неубывания
    if result == '1315':           # Если результат равен 1315
        print(n)                   # Выводим найденное число

# Ответ: 9976
